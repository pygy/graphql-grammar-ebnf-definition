/**
 * GraphQL-Grammar-EBNF-Definition-June-2018-Edition.ebnf
 *
 * author:     karminski <code.karminski@outlook.com>
 * license:    MIT <https://opensource.org/licenses/MIT>
 *
 * This GraphQL EBNF file arranged by GraphQL Specifition June 2018.
 * http://spec.graphql.org/June2018/
 *
 * For grammar summary please see:
 * https://spec.graphql.org/June2018/#sec-Appendix-Grammar-Summary
 * 
 *
 * This EBNF file use W3C EBNF definition:
 * https://www.w3.org/TR/xml/#sec-notation
 * 
 * Why we should not use ISO-14977 ebnf:
 * https://dwheeler.com/essays/dont-use-iso-14977-ebnf.html
 *
 * For generate Railroad Diagram please see:
 * https://bottlecaps.de/rr/ui 
 *
 * list      -> +
 * opt       -> ?
 * list, opt -> *
 */


/* SourceCharacter Expression */
SourceCharacter ::=  #x0009 | #x000A | #x000D | [#x0020-#xFFFF] /* /[\u0009\u000A\u000D\u0020-\uFFFF]/ */



/* __ Tokens Expression */
__             ::= UnicodeBOM | WhiteSpace | LineTerminator | Comment | Comma
UnicodeBOM     ::= #xFEFF  /* Byte Order Mark (U+FEFF) */
WhiteSpace     ::= #x0009 | #x0020 /* ASCII: \t | Space, Horizontal Tab (U+0009), Space (U+0020) */
LineTerminator ::= #x000A | #x000D | #x000D#x000A   /* ASCII: \n | \r\n | \r, New Line (U+000A) | Carriage Return (U+000D) [Lookahead != New Line (U+000A)] | Carriage Return (U+000D)New Line (U+000A) */
Comment        ::= "#" CommentChar*
CommentChar    ::= SourceCharacter - LineTerminator
Comma          ::= ","



/* Lexical Tokens Expression */
Token                ::= Punctuator | Name | IntValue | FloatValue | StringValue
Punctuator           ::= "!" | "$" | "(" | ")" | "..." | ":" | "=" | "@" | "[" | "]" | "{" | "|" | "}"
Name                 ::= [_A-Za-z][_0-9A-Za-z]*
IntValue             ::= IntegerPart 
IntegerPart          ::= NegativeSign? __ "0" __ | NegativeSign? __ NonZeroDigit __ Digit* __ /* "[\+\-0-9]+" */
NegativeSign         ::= "-"
Digit                ::= [0-9]
NonZeroDigit         ::= Digit - "0"
FloatValue           ::= IntegerPart FractionalPart | IntegerPart ExponentPart | IntegerPart FractionalPart ExponentPart /* "[\+\-0-9]+\.[0-9]" */
FractionalPart       ::= "." Digit+
ExponentPart         ::= ExponentIndicator Sign? Digit+
ExponentIndicator    ::= "e" | "E"
Sign                 ::= "+" | "-"
StringValue          ::= '"""' '"""' | '"' '"' | '"' StringCharacter* '"' | '"""' BlockStringCharacter* '"""'
StringCharacter      ::= SourceCharacter - '"' | SourceCharacter - "\" | SourceCharacter - LineTerminator | "\u" EscapedUnicode | "\" EscapedCharacter /* SourceCharacter but not " or \ or LineTerminator | \uEscapedUnicode | \EscapedCharacter */
EscapedUnicode       ::= [#x0000-#xFFFF] 
EscapedCharacter     ::= '"' | '\' | '/' | 'b' | 'f' | 'n' | 'r' | 't'
BlockStringCharacter ::= SourceCharacter - '"""' | SourceCharacter - '\"""' | '\"""' 



/* Document Expression */
Document ::= __ Definition+ __


/* Definition Expression */
Definition           ::= ExecutableDefinition | TypeSystemDefinition | TypeSystemExtension
ExecutableDefinition ::= OperationDefinition | FragmentDefinition


/* OperationDefinition Expression */
OperationDefinition ::= SelectionSet __ | __ OperationType __ Name? __ VariableDefinitions? __ Directives? SelectionSet __
OperationType       ::= "query" | "mutation" | "subscription" 


/* SelectionSet Expression */
SelectionSet ::= "{" __ Selection+ __ "}" __
Selection    ::= Field __ | FragmentSpread __ | InlineFragment __


/* Field Expression */
Field ::= Alias? __ Name __ Arguments? __ Directives? __ SelectionSet? __


/* Alias Expression */
Alias ::= Name __ ":" __


/* Arguments Expression */
Arguments ::= "(" __ Argument+ __ ")" __
Argument  ::= Name __ ":" __ Value __


/* FragmentSpread Expression */
FragmentSpread     ::= "..." __ FragmentName __ Directives? __
InlineFragment     ::= "..." __ TypeCondition? __ Directives? __ SelectionSet __
FragmentDefinition ::= "fragment" __ FragmentName __ TypeCondition __ Directives? __ SelectionSet __
FragmentName       ::= Name - "on"
TypeCondition      ::= "on" __ NamedType __


/* Value Expression */ 
Value            ::= Variable | IntValue | FloatValue | StringValue | BooleanValue | NullValue | EnumValue | ListValue | ObjectValue
BooleanValue     ::= "true" | "false"
NullValue        ::= "null"
EnumValue        ::=  Name - "true" | Name - "false" | Name - "null" /* Name but not "true" or "false" or "null", "(?!(true|false|null))[_A-Za-z][_0-9A-Za-z]*" */
ListValue        ::= "[" "]" | "[" Value+ "]"
ObjectValue      ::= "{" "}" | "{" ObjectField+ "}"
ObjectField      ::= __ Name __ ":" __ Value __


/* VariableDefinitions Expression */
VariableDefinitions ::= "(" VariableDefinition+ ")"
VariableDefinition  ::= Variable __ ":" __ Type __ DefaultValue? __
Variable            ::= "$" Name
DefaultValue        ::= "=" __ Value


/* Type Expression */
Type        ::= NamedType | ListType | NonNullType
NamedType   ::= Name
ListType    ::= "[" Type "]"
NonNullType ::= NamedType "!" | ListType "!"


/* Directives Expression */
Directives ::= Directive+
Directive  ::= "@" __ Name __ Arguments? __


/* TypeSystemDefinition Expression */
TypeSystemDefinition ::= SchemaDefinition | TypeDefinition | DirectiveDefinition
TypeSystemExtension  ::= SchemaExtension | TypeExtension


/* SchemaDefinition Expression */
SchemaDefinition ::= "schema" __ Directives? __ "{" __ OperationTypeDefinition+ __ "}" __
SchemaExtension  ::= "extend" __ "schema" Directives? __ "{" __ OperationTypeDefinition+ __ "}" __ | "extend" __ "schema" Directives __


/* OperationTypeDefinition Expression */
OperationTypeDefinition ::= OperationType __ ":" __ NamedType __


/* Description Expression */
Description ::= StringValue


/* TypeDefinition Expression */
TypeDefinition            ::= ScalarTypeDefinition | ObjectTypeDefinition | InterfaceTypeDefinition | UnionTypeDefinition | EnumTypeDefinition | InputObjectTypeDefinition
TypeExtension             ::= ScalarTypeExtension | ObjectTypeExtension | InterfaceTypeExtension | UnionTypeExtension | EnumTypeExtension | InputObjectTypeExtension

ScalarTypeDefinition      ::= Description? __ "scalar" __ Name __ Directives? __
ScalarTypeExtension       ::= "extend" __ "scalar" __ Name __ Directives __

ObjectTypeDefinition      ::= Description? __ "type" __ Name __ ImplementsInterfaces? __ Directives? __ FieldsDefinition? gnored
ObjectTypeExtension       ::= "extend" __ "type" __ Name __ ImplementsInterfaces? __ Directives? __ FieldsDefinition __ | "extend" __ "type" __ Name __ ImplementsInterfaces? __ Directives __ | "extend" __ "type" __ Name __ ImplementsInterfaces __

ImplementsInterfaces      ::= "implements" __ "&"? __ NamedType __ | ImplementsInterfaces __ "&" __ NamedType __

InterfaceTypeDefinition   ::= Description? __ "interface" __ Name __ Directives? __ FieldsDefinition? __
InterfaceTypeExtension    ::= "extend" __ "interface" __ Name __ Directives? __ FieldsDefinition __ | "extend" __ "interface" __ Name __ Directives __ 

UnionTypeDefinition       ::= Description? __ "union" __ Name __ Directives? __ UnionMemberTypes? __
UnionMemberTypes          ::= "=" __ "|"? __ NamedType __ | UnionMemberTypes __ "|" __ NamedType __
UnionTypeExtension        ::= "extend" __ "union" __ Name __ Directives? __ UnionMemberTypes? __ | "extend" __ "union" __ Name __ Directives __

EnumTypeDefinition        ::= Description? __ "enum" __ Name __ Directives? __ EnumValuesDefinition? __
EnumValuesDefinition      ::= "{" __ EnumValueDefinition+ __ "}" __
EnumValueDefinition       ::= Description? __ EnumValue __ Directives? __
EnumTypeExtension         ::= "extend" __ "enum" __ Name __ Directives? __ EnumValuesDefinition __ | "extend" __ "enum" __ Name __ Directives __

InputObjectTypeDefinition ::= Description? __ "input" __ Name __ Directives? __ InputFieldsDefinition? __
InputFieldsDefinition     ::= "{" __ InputValueDefinition+ __ "}" __
InputObjectTypeExtension  ::= "extend" __ "input" __ Name __ Directives? __ InputFieldsDefinition __ | "extend" __ "input" __ Name __ Directives __ 


/* DirectiveDefinition Expression */
DirectiveDefinition         ::= Description? __ "directive" __ "@" __ Name __ ArgumentsDefinition? __ "on" __ DirectiveLocations __
DirectiveLocations          ::= "|"? __ DirectiveLocation __ | DirectiveLocations __ "|" __ DirectiveLocation __
DirectiveLocation           ::= ExecutableDirectiveLocation | TypeSystemDirectiveLocation
ExecutableDirectiveLocation ::= "QUERY" | "MUTATION" | "SUBSCRIPTION" | "FIELD" | "FRAGMENT_DEFINITION" | "FRAGMENT_SPREAD" | "INLINE_FRAGMENT" 
TypeSystemDirectiveLocation ::= "SCHEMA" | "SCALAR" | "OBJECT" | "FIELD_DEFINITION" | "ARGUMENT_DEFINITION" | "INTERFACE" | "UNION" | "ENUM" | "ENUM_VALUE" | "INPUT_OBJECT" | "INPUT_FIELD_DEFINITION" 


/* FieldsDefinition Expression */
FieldsDefinition ::= "{" __ FieldDefinition+ __ "}"
FieldDefinition  ::= Description? __ Name __ ArgumentsDefinition? __ ":" __ Type __ Directives? __


/* ArgumentsDefinition Expression */
ArgumentsDefinition  ::= "(" __ InputValueDefinition+ __ ")" __
InputValueDefinition ::= Description? __ Name __ ":" __ Type __ DefaultValue? __ Directives? __
